--1
DECLARE
    NUMER_MAX NUMBER(5);
    NEW_DEPARTMENT DEPARTMENTS.DEPARTMENT_NAME%TYPE := 'EDUCATION';
BEGIN
   SELECT MAX(DEPARTMENT_ID) INTO NUMER_MAX FROM DEPARTMENTS;
   
   INSERT INTO DEPARTMENTS(DEPARTMENT_ID, DEPARTMENT_NAME) 
   VALUES ((NUMER_MAX+10), NEW_DEPARTMENT);
   
   DBMS_OUTPUT.PUT_LINE('Dodano nowy departament o numerze: ' || NUMER_MAX || ' i nazwie: ' || NEW_DEPARTMENT);
END;


--2
DECLARE
    NUMER_MAX NUMBER(5);
    NEW_DEPARTMENT DEPARTMENTS.DEPARTMENT_NAME%TYPE := 'EDUCATION';
BEGIN
   SELECT MAX(DEPARTMENT_ID) INTO NUMER_MAX FROM DEPARTMENTS;
   
   INSERT INTO DEPARTMENTS(DEPARTMENT_ID, DEPARTMENT_NAME) 
   VALUES ((NUMER_MAX+10), NEW_DEPARTMENT);

   UPDATE DEPARTMENTS SET LOCATION_ID = 3000 WHERE DEPARTMENT_ID = (NUMER_MAX+10);
   
   DBMS_OUTPUT.PUT_LINE('Dodano nowy departament o numerze: ' || NUMER_MAX || ' i nazwie: ' || NEW_DEPARTMENT || 'z location_id = 3000');
END;


--3
CREATE TABLE NOWA(liczba VARCHAR2(10));
BEGIN
  FOR i IN 1..10 LOOP
    IF i != 4 AND i != 6 THEN
      INSERT INTO NOWA(liczba) VALUES (i);
    END IF;
  END LOOP;
  COMMIT;
END;


--4
DECLARE
  KRAJ COUNTRIES%ROWTYPE;
BEGIN
  SELECT * INTO KRAJ FROM COUNTRIES WHERE COUNTRY_ID = 'CA';

  DBMS_OUTPUT.PUT_LINE('Nazwa: ' || KRAJ.COUNTRY_NAME || ', region_id: ' || KRAJ.REGION_ID);
END;


--5
DECLARE
  CURSOR WYNAGRODZENIA IS
    SELECT SALARY, LAST_NAME FROM EMPLOYEES WHERE DEPARTMENT_ID = 50;
  V_WYNAGRODZENIE EMPLOYEES.SALARY%TYPE;
  V_NAZWISKO EMPLOYEES.LAST_NAME%TYPE;
BEGIN
  FOR REC IN WYNAGRODZENIA LOOP
    V_WYNAGRODZENIE := REC.SALARY;
    V_NAZWISKO := REC.LAST_NAME;

    IF V_WYNAGRODZENIE > 3100 THEN
     DBMS_OUTPUT.PUT_LINE(V_NAZWISKO || ' nie dawać podwyżki');
    ELSE
      DBMS_OUTPUT.PUT_LINE(V_NAZWISKO || ' dać podwyżkę');
    END IF;
  END LOOP;
END;


--6
DECLARE
  CURSOR PRACOWNICY (MIN_SALARY NUMBER, MAX_SALARY NUMBER, NAME_PART VARCHAR2) IS
    SELECT FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES
    WHERE SALARY BETWEEN MIN_SALARY AND MAX_SALARY 
    AND (UPPER(FIRST_NAME) LIKE '%' || UPPER(NAME_PART) || '%');
BEGIN
  DBMS_OUTPUT.PUT_LINE('a');
  FOR REC IN PRACOWNICY(1000, 5000, 'A') LOOP
    DBMS_OUTPUT.PUT_LINE(REC.FIRST_NAME || ' ' || REC.LAST_NAME || ' ' || REC.SALARY);
  END LOOP;
  
  DBMS_OUTPUT.PUT_LINE('b');
  FOR REC IN PRACOWNICY(5000, 20000, 'U') LOOP
    DBMS_OUTPUT.PUT_LINE(REC.FIRST_NAME || ' ' || REC.LAST_NAME || ' ' || REC.SALARY);
  END LOOP;
END;


--9
--a
CREATE OR REPLACE PROCEDURE DODAJ_JOB(P_JOB_ID VARCHAR2, P_JOB_TITLE VARCHAR2) IS
BEGIN
    INSERT INTO JOBS(JOB_ID, JOB_TITLE)
    VALUES (P_JOB_ID, P_JOB_TITLE);
    DBMS_OUTPUT.PUT_LINE('Dodano job');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: ' || SQLERRM);
END DODAJ_JOB;
--test a
--BEGIN 
--    DODAJ_JOB('abc', 'xyz');
--END;

--b
CREATE OR REPLACE PROCEDURE UPDATE_JOB_TITLE(P_JOB_ID VARCHAR2, P_NEW_TITLE VARCHAR2) IS
BEGIN
    UPDATE JOBS
    SET JOB_TITLE = P_NEW_TITLE
    WHERE JOB_ID = P_JOB_ID;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No jobs updated');
    END IF;

    DBMS_OUTPUT.PUT_LINE('Zaktualizowano job: ' || P_JOB_ID);
EXCEPTION
    WHEN OTHERS THEN
        IF INSTR(SQLERRM, 'ORA-12899') > 0 THEN
            DBMS_OUTPUT.PUT_LINE('Błąd: za długi tekst: ');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLERRM);
        END IF;
END;

--c
CREATE OR REPLACE PROCEDURE USUN_JOB (P_JOB_ID VARCHAR2) IS
BEGIN
    DELETE FROM JOBS
    WHERE JOB_ID = P_JOB_ID;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'No jobs deleted');
    END IF;

    DBMS_OUTPUT.PUT_LINE('Usunięto job: ' || P_JOB_ID);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLERRM);
END;
--test c
--BEGIN
--    USUN_JOB('11');
--END;

--d
CREATE OR REPLACE PROCEDURE GET_SALARY 
(P_EMPLOYEE_ID NUMBER, P_SALARY OUT EMPLOYEES.SALARY%TYPE, P_LAST_NAME OUT EMPLOYEES.LAST_NAME%TYPE) 
IS
BEGIN
    SELECT SALARY, LAST_NAME
    INTO P_SALARY, P_LAST_NAME
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = P_EMPLOYEE_ID;

    DBMS_OUTPUT.PUT_LINE('Pracownik: ' || P_LAST_NAME || ', Zarobki: ' || P_SALARY);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Nie znaleziono pracownika o ID: ' || P_EMPLOYEE_ID);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLERRM);
END;

--e
CREATE SEQUENCE EMPLOYEES_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE PROCEDURE DODAJ_EMPLOYEE (
    P_FIRST_NAME EMPLOYEES.FIRST_NAME%TYPE := 'John',
    P_LAST_NAME EMPLOYEES.LAST_NAME%TYPE := 'Doe',
    P_SALARY EMPLOYEES.SALARY%TYPE := 3000,
    P_JOB_ID EMPLOYEES.JOB_ID%TYPE := 'IT_PROG',
    P_DEPARTMENT_ID EMPLOYEES.DEPARTMENT_ID%TYPE := 10
) IS
    NEW_EMPLOYEE_ID NUMBER;
BEGIN
    SELECT EMPLOYEES_SEQ.NEXTVAL INTO NEW_EMPLOYEE_ID FROM DUAL;

    IF P_SALARY > 20000 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Salary exceeds maximum allowed limit.');
    END IF;

    INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY, JOB_ID, DEPARTMENT_ID)
    VALUES (NEW_EMPLOYEE_ID, P_FIRST_NAME, P_LAST_NAME, P_SALARY, P_JOB_ID, P_DEPARTMENT_ID);
    DBMS_OUTPUT.PUT_LINE('Dodano nowego pracownika: ' || P_FIRST_NAME || ' ' || P_LAST_NAME);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLERRM);
END;
